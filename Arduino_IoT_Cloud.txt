/*
  Sketch generated by the Arduino IoT Cloud Thing "Rainy"
  https://create.arduino.cc/cloud/things/50ececd7-cf3b-46e7-8863-620ac3a62d79

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  CloudLength altitude;
  CloudRelativeHumidity humidity;
  CloudPressure pressure;
  CloudVelocity windspeed;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <EduIntro.h>
#include <Adafruit_BMP085.h>

Adafruit_BMP085 bmp;

DHT11 dht11(D0);  // creating the object sensor on pin 'D7'

int C;   // temperature C readings are integers
int H;   // humidity readings are integers
float P;
float A;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  if (!bmp.begin()) {
    Serial.println("Could not find a valid BMP085 sensor, check wiring!");
    while (1) {}
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  dht11.update();

  C = dht11.readCelsius();     	// Reading the temperature in Celsius degrees and store in the C variable
  H = dht11.readHumidity();     // Reading the humidity index

  temperature = C;
  humidity = H;

  Serial.print("\tC: ");
  Serial.println(C);
  Serial.print("H: ");
  Serial.println(H);

  P = bmp.readPressure();
  A = bmp.readAltitude();

  pressure = P;
  altitude = A;

  //Serial.print("Pressure = ");
  //Serial.print(P);
  //Serial.println(" Pa");

  //Serial.print("Altitude = ");
  //Serial.print(A);
  //Serial.println(" meters");

  float sensorValue = analogRead(A0);
  //Serial.print("Analog Value =");
  //Serial.println(sensorValue);

  float voltage = (sensorValue / 1023) * 3.3;
  //Serial.print("Voltage =");
  //Serial.print(voltage);
  //Serial.println(" V");

  float wind_speed = mapfloat(voltage, 0, 3.3, 0, 19.8);
  float speed_mph = ((wind_speed * 3600) / 1609.344);
  //Serial.print("Wind Speed =");
  //Serial.print(wind_speed);
  //Serial.println("m/s");

  windspeed = wind_speed;
  delay(1000);
}

float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}